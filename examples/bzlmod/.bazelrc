common --enable_bzlmod
common --lockfile_mode=update


# Use a minimal set of environment variables for action execution to improve
# build hermeticity and remote cache hits.
common --incompatible_strict_action_env


# Enable BuildBuddy build event service
common --bes_results_url=https://app.buildbuddy.io/invocation/
common --bes_backend=grpcs://remote.buildbuddy.io
# Enable BuildBuddy Remote Execution
common:remote --remote_timeout=3600
common:remote --remote_executor=grpcs://remote.buildbuddy.io


## Register "execution platforms" and "cc toolchains" using Bazel flag.
#
# Relevant toolchains are registered automatically inside "toolchains_buildbuddy" module's MODULE.bazel file.
# Note that execution platforms are NOT registered automatically.
#
# User can register custom toolchains and execution platforms in their MODULE.bazel file using
# `register_execution_platforms` and `register_toolchains` global starlark functions.
# These will take precedence over the default ones.
#
# The flags `--extra_execution_platforms` and `--extra_toolchains` are used to override the staticcally
# registered toolchains and execution platforms.
# For example:
#
#   common:remote-linux --extra_execution_platforms=@toolchains_buildbuddy//platforms:linux_x86_64
#   common:remote-linux --extra_toolchains=@toolchains_buildbuddy//toolchains/cc:ubuntu_gcc_x86_64
#
# Use flag `--toolchain_resolution_debug=cpp` to troubleshoot Bazel's toolchain
# resolution and selection.
#
# References:
#   - https://bazel.build/external/migration#register-toolchains
#   - https://bazel.build/rules/lib/globals/module#register_execution_platforms
#   - https://bazel.build/rules/lib/globals/module#register_toolchains


## Target Linux platform when build remotely
#
# Usage:
#
#   $ bazel build --config=remote-linux //...
#
common:remote-linux --config=remote
common:remote-linux --platforms=@toolchains_buildbuddy//platforms:linux_x86_64
common:remote-linux --extra_execution_platforms=@toolchains_buildbuddy//platforms:linux_x86_64
common:remote-linux --extra_toolchains=@toolchains_buildbuddy//toolchains/cc:ubuntu_gcc_x86_64

common:remote-linux-arm64 --config=remote
common:remote-linux-arm64 --platforms=@toolchains_buildbuddy//platforms:linux_arm64
common:remote-linux-arm64 --extra_execution_platforms=@toolchains_buildbuddy//platforms:linux_arm64

## Using custom Linux platform
# 
# This helps verify that user can extend our platform definitions via inheritence.
common:custom-linux --config=remote
common:custom-linux --platforms=//:my_linux_platform
common:custom-linux --extra_execution_platforms=//:my_linux_platform

## Target Windows platform when build remotely
#
# Usage:
#
#   $ bazel build --config=remote-windows //...
#
common:remote-windows --config=remote
common:remote-windows --platforms=@toolchains_buildbuddy//platforms:windows_x86_64
common:remote-windows --extra_execution_platforms=@toolchains_buildbuddy//platforms:windows_x86_64


# Separate file to keep API Key that should have the follow flag
#
#   common --remote_header=x-buildbuddy-api-key=********
#
try-import %workspace%/user.bazelrc
